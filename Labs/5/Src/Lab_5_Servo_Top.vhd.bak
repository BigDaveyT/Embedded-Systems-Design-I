-------------------------------------------------------------------------
-- Name:        David Tassoni
-- Course:      CPET 561-01
-- Assignment: Lab 4 
-- File:        Lab_5_Servo_Top.vhd
--
-------------------------------------------------------------------------

library ieee;
use ieee.std_logic_1164.all;
use ieee.std_logic_unsigned.all;
use ieee.std_logic_arith.all;

ENTITY Lab_5_Servo_Top IS
    Port
    (
        ----- CLOCK -----
        CLOCK_50 : in std_logic;
        ----- SEG7 -----
        HEX5 : out std_logic_vector(6 downto 0);
        HEX4 : out std_logic_vector(6 downto 0);
        HEX3 : out std_logic_vector(6 downto 0);
        HEX2 : out std_logic_vector(6 downto 0);
        HEX1 : out std_logic_vector(6 downto 0);
        HEX0 : out std_logic_vector(6 downto 0);  
        ----- KEY -----
        KEY : in std_logic_vector(3 downto 0);
        ----- SW -----
        SW : in  std_logic_vector(7 downto 0);
        ----- LED -----
        LEDR : out  std_logic_vector(9 downto 0);
        ----- GPIO_0, GPIO_0 connect to GPIO Default -----
        GPIO_0 : inout  std_logic_vector(35 downto 0)  
    );
End ENTITY Lab_5_Servo_Top;

ARCHITECTURE arch of Lab_5_Servo_Top IS

    -- Signal Declarations
    Signal Reset_n    : std_logic;
    Signal Key0_D1    : std_logic;
    Signal Key0_D2    : std_logic;
    Signal Key0_D3    : std_logic;
    Signal Write_En   : std_logic := '1'; --Continuous sweep of servo (always acknowledge interrupts)
    Signal Address_0  : std_logic_vector(1  downto 0) := "00"; --Signal to access register 0
    Signal Write_Data : std_logic_vector(31 downto 0) := x"0000C350"; --50,000, the Min Angle Value

    --Component Declaration for Servo Controller
    -- Component Lab_5_Servo IS
        -- Port
        -- (
            -- clk       : IN  STD_LOGIC;
            -- reset_n   : IN  STD_LOGIC;
            -- write     : IN  STD_LOGIC;
            -- writedata : IN  STD_LOGIC_VECTOR(31 downto 0);
            -- address   : IN  STD_LOGIC_VECTOR( 1 downto 0);
            -- wave_out  : OUT STD_LOGIC;
            -- irq       : OUT STD_LOGIC  
        -- );
    -- End Component Lab_5_Servo;  
    component nios_system is
    port
    (
        clk_clk                                 : in  std_logic                    := 'X';             -- clk
        hex0_export                             : out std_logic_vector(6 downto 0);                    -- export
        hex1_export                             : out std_logic_vector(6 downto 0);                    -- export
        hex2_export                             : out std_logic_vector(6 downto 0);                    -- export
        hex3_export                             : out std_logic_vector(6 downto 0);                    -- export
        hex4_export                             : out std_logic_vector(6 downto 0);                    -- export
        hex5_export                             : out std_logic_vector(6 downto 0);                    -- export
        pushbuttons_export                      : in  std_logic_vector(3 downto 0) := (others => 'X'); -- export
        reset_reset_n                           : in  std_logic                    := 'X';             -- reset_n
        switches_export                         : in  std_logic_vector(7 downto 0) := (others => 'X'); -- export
        servo_controller_0_conduit_end_wave_out : out std_logic                                        -- writeresponsevalid_n
    );
    end component nios_system;
    
    BEGIN
        ----- Syncronize the reset
        synchReset_proc : process (CLOCK_50) begin
        if (rising_edge(CLOCK_50)) then
            Key0_D1 <= KEY(0);
            Key0_D2 <= Key0_D1;
            Key0_D3 <= Key0_D2;
        end if;
    end process synchReset_proc;
    
    Reset_n <= Key0_D3;

    u0 : component nios_system
        port map
        (
            clk_clk                                 => CLOCK_50, -- clk.clk
            hex0_export                             => HEX0,     -- hex0.export
            hex1_export                             => HEX1,     -- hex1.export
            hex2_export                             => HEX2,     -- hex2.export
            hex3_export                             => HEX3,     -- hex3.export
            hex4_export                             => HEX4,     -- hex4.export
            hex5_export                             => HEX5,     -- hex5.export
            pushbuttons_export                      => KEY,      -- pushbuttons.export
            reset_reset_n                           => reset_n,  -- reset.reset_n
            switches_export                         => SW,       -- switches.export
            servo_controller_0_conduit_end_wave_out => GPIO_0    -- servo_controller_0_conduit_end.writeresponsevalid_n
        );
End Architecture arch;
